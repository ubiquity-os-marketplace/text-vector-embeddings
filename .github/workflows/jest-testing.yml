name: Run Bun testing suite
on:
  workflow_dispatch:
  pull_request:

env:
  NODE_ENV: "test"

jobs:
  testing:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install toolchain
        run: bun install --frozen-lockfile

      - name: Bun Test With Coverage
        run: bun test --coverage --reporter=junit --reporter-outfile=./junit.xml

      - name: Generate Markdown Dashboard from JUnit XML
        run: |
          bun add fast-xml-parser@4.2.5
          cat <<'EOF' > junit-to-md.ts
          import { readFileSync, writeFileSync } from "fs";
          import { XMLParser } from "fast-xml-parser";

          function formatDuration(sec: number) {
            return sec > 1 ? `${sec.toFixed(2)} s` : `${(sec * 1000).toFixed(0)} ms`;
          }

          function githubFileLink(file: string, sha: string) {
            return `https://github.com/${process.env.GITHUB_REPOSITORY}/blob/${sha}/${file}`;
          }

          const xml = readFileSync("junit.xml", "utf8");
          const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: "" });
          const data = parser.parse(xml);

          const suites = data.testsuites;
          const suiteList = Array.isArray(suites.testsuite) ? suites.testsuite : [suites.testsuite];
          const totalTests = Number(suites.tests);
          const totalFailures = Number(suites.failures);
          const totalSkipped = Number(suites.skipped);
          const totalTime = Number(suites.time);

          const sha = process.env.GITHUB_SHA || "";
          const startTime = new Date().toLocaleString();

          let md = `# Test Dashboard

          `;

          md += "| :clock10: Start time | :hourglass: Duration |\n";
          md += "| --- | ---: |\n";
          md += `|${startTime}|${formatDuration(totalTime)}|\n\n`;

          md += "| | :white_check_mark: Passed | :x: Failed | :construction: Todo | :white_circle: Total |\n";
          md += "| --- | ---: | ---: | ---:| ---: |\n";
          md += `|Test Suites|${suiteList.length}|${totalFailures}|-|${suiteList.length}|\n`;
          md += `|Tests|${totalTests - totalFailures - totalSkipped}|${totalFailures}|${totalSkipped}|${totalTests}|\n`;

          for (const suite of suiteList) {
            const file = suite.file || suite.name;
            const fileLink = githubFileLink(file, sha);
            const cases = suite.testsuite?.testcase || suite.testcase || [];
            const testcases = Array.isArray(cases) ? cases : [cases];
            const passed = testcases.filter(tc => !tc.failure && !tc.skipped).length;
            const failed = testcases.filter(tc => !!tc.failure).length;
            const skipped = testcases.filter(tc => !!tc.skipped).length;
            const suiteTime = Number(suite.time || 0);

            md += `\n## ${file} [[link](${fileLink})]\n\n${passed} passed, ${failed} failed, ${skipped} todo, done in ${formatDuration(suiteTime)}\n`;

            const classGroups = {};
            for (const tc of testcases) {
              const group = tc.classname || "Tests";
              if (!classGroups[group]) classGroups[group] = [];
              classGroups[group].push(tc);
            }

            for (const group of Object.keys(classGroups)) {
              md += `\n- :white_check_mark: ${group}`;
              for (const tc of classGroups[group]) {
                let status = ":white_check_mark:";
                if (tc.failure) status = ":x:";
                else if (tc.skipped) status = ":construction:";
                md += `\n  - ${status} ${tc.name}`;
              }
            }
            md += "\n";
          }

          writeFileSync("test-dashboard.md", md);
          EOF
          bun run junit-to-md.ts

      - name: Add Bun Report to Summary
        if: always()
        run: echo "$(cat test-dashboard.md)" >> $GITHUB_STEP_SUMMARY
